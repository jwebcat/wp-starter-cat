// mixins for kraken-sass

@mixin adjust-to($media) {
    @if $media == handhelds {
      @media  only screen and (max-width: $break-small) { @content; }
    }
    @else if $media == medium-screens {
      @media only screen and (min-width: $break-small + 1px) and (max-width: $break-large - 1px) { @content; }
    }
    @else if $media == wide-screens {
      @media only screen and (min-width: $break-large) { @content; }
    }
    @else if $media == ballena {
      @media only screen and (min-width: $break-x-large) { @content; }
    }
    @else if $media == retina-screens {
      @media  only screen and (min-width: $break-small + 1px) and (max-width: $break-large - 1px) and (min-device-pixel-ratio: 1.5) and (-webkit-min-device-pixel-ratio: 1.5) { @content; }
    }
}

// example use for adjust-to()
// .profile-pic {
//     float: left;
//     width: 250px;
//     @include  adjust-to(handhelds) { width: 100% ;}
//     @include  adjust-to(medium-screens) { width: 125px; }
//     @include  adjust-to(wide-screens) { float: none; }
//     @include  adjust-to(retina-screens) {background-image:url()}
// }

// or like this
// @include adjust-to(handhelds) {
//     .profile-pic {
//         width: 100%;
//     }
//         .profile-header {
//             font-size: 1.3em;
//         }
// }

// Rem Font Sizing ----------------------------------------------------
// https://github.com/ry5n/rem

// Base font size in pixels, if not already defined.
// Should be the same as the font-size of the html element.
$base-font-size: 16px !default;
$rem-with-px-fallback: true !default;

// @private Number of pixels in 1rem.
// For px -> rem, divide by this ratio; for the other way, multiply.
$px-per-rem: $base-font-size / 1rem;

// Return pixel values as rem
@function px-to-rem($px-value) {
  @return $px-value / $px-per-rem;
}

// Return rem values as px
@function rem-to-px($rem-value) {
  @return $rem-value * $px-per-rem;
}

// For the given property, use rem units with px as a fallback value for older
// browsers.
//
// $property - The css property name.
// $values - The value (or space-separated list of values) for the property.
// $use-px-fallback - Boolean, default: true; whether to use pixel fallback values
//
@mixin remz($property, $values, $use-px-fallback: $rem-with-px-fallback) {
  // Create a couple of empty lists as output buffers.
  $px-values: ();
  $rem-values: ();

  // Ensure $values is a list.
  @if type-of($values) != "list" {
    $values: join((), $values);
  }

  // Loop through the $values list
  @each $value in $values {
    // For each property value, if it's in rem or px, derive both rem and
    // px values for it and add those to the end of the appropriate buffer.
    @if(type-of($value) == number and not unitless($value) and (unit($value) == px or unit($value) == rem)) {
      @if unit($value) == px {
        $px-values: join($px-values, $value);
        $rem-values: join($rem-values, px-to-rem($value));
      }
      @else {
        $px-values: join($px-values, rem-to-px($value));
        $rem-values: join($rem-values, $value);
      }
    }
    @else {
      $px-values: join($px-values, $value);
      $rem-values: join($rem-values, $value);
    }
  }

  // Use pixel fallback for browsers that don't understand rem units.
  @if $use-px-fallback {
    #{$property}: $px-values;
  }

  // Use rem values for everyone else (overrides pixel values).
  #{$property}: $rem-values;
}

// Em Font Sizing -----------------------------------------------------

@function zem($target, $context: $baseline-px) {
      @if $target == 0 { @return 0 }
      @return $target / $context + 0em;
}

// Scaling ------------------------------------------------------------

// https://gist.github.com/2237465
// See http://mrdanadams.com/2012/pixel-ems-css-conversion-sass-mixin/

// Default font size in pixels if not overridden.
// $baseFontSize: 16;

//Convert PX units to EMs.
//Ex: margin-right: pem(16);

@function pxem($pxval, $base: $baseFontSize) {
  @return #{$pxval / $base}em;
}

// Used to convert PX to EMs for multiple properties or values or both.
//$base is an optional measurement that allows making measurements relative to the parent font size rather than the current. Also accepts a list of lists (instead a list of values) for properties that accept multiple lists of values. Only numbers of converted; everything else is passed through.

//Examples:

//@include scale(line-height, 30)
//@include scale(line-height, 30, 16)
//@include scale(width height, 125);
//@include scale(padding, 0 25, 16);
//@include scale(text-shadow, (#0d6e28 1 1) (#777 0 0 2), 16);
//@include scale(box-shadow, (inset 0 0 0 1 #2a9022) (inset 0 0 3 #459966), 16);
//
@mixin scale($props, $sizes, $base: $baseFontSize) {
    $values: ();
    $sublists: false;
    @each $s in $sizes {
        /* unwrap lists for values that have multiple list of values such as text-shadow */
        @if type-of($s) == list {
            $sublists: true;
            $vv: ();
            @each $ss in $s {
                $vv: append($vv, if(type-of($ss) == number, #{$ss / $base}em, $ss));
            }
            $values: append($values, join((), $vv));
        } @else {
            $values: append($values, if(type-of($s) == number, #{$s / $base}em, $s));
        }
    }
    $value: join((), $values, if($sublists, comma, space));
    @each $prop in $props { #{$prop}: $value }
}

// px to em function

@function em($px, $base: $base-font-size) {
    @return ($px / $base) * 1em;
}

// unity by Stephen Rushing

// http://github.com/stephenr85/sass-unity
// @category units
// @author Stephen Rushing, eSiteful

$baseline: 16px !default;
$em-baseline: $baseline !default;
$px-per-inch: 96px !default;
$pt-per-inch: 72pt !default;




// If a number has a .00001 decimal, it's probably a rounding issue and needs to be dropped.
// @function sub-px
// @param $dim
@function sub-px($dim){
    $dim: $dim * 1;
    $-diff: $dim - floor($dim);
    @if($-diff >= .00001 and $-diff > 0){
        @return floor($dim);
    }
    @return $dim;
}

// Removes the unit from a number.
// @function strip-unit
// @param $num {Number}
// =strip-unit(16px) = 16
@function strip-unit($num){
    @return $num / ($num * 0 + 1);
}


// Find the first unit in a list of numbers.
// @function first-unit
// @param $dims...
// =first-unit(0 12% 10% 1px) = px
@function first-unit($dims...){
    $unit: null;
    @each $dim in $dims {
        @if($unit == null){
            @if(type-of($dim) == "number" and unitless($dim) == false){
                @return unit($dim);
            }@else if(type-of($dim) == "list" or type-of($dim) == "arglist"){
                @each $val in $dim {
                    //repeat logic
                    @if($unit == null){
                        @if(type-of($val) == "number" and unitless($val) == false and unit($val) != "%"){
                            @return unit($val);
                        }@else if(type-of($val) == "list" or type-of($val) == "arglist"){
                            @return first-unit($val);
                        }
                    }
                }
            }
        }
    }
    @return $unit;
}



// Convert any number to a px, or ensure a px value.
// Percentages are retained. Use percent() to calculate static values.
// @function px
// @param $dim
// @return {Number} A px value.
// =px(1rem) = 16px
// =px(1 4rem 2em 10%) = 1px 64px 26px 10%
@function px($dim){
    $-is-list: type-of($dim) == "arglist" or type-of($dim) == "list";
    @if($-is-list and length($dim) > 1){
        $pxs: ();
        @each $value in $dim {
            $pxs: append($pxs, px($value));
        }
        @if(length($pxs) == 1){
            @return nth($pxs, 1);
        }@else{
            @return $pxs;
        }
    }@else if($-is-list){
        $dim: nth($dim, 1);
    }
    @if($dim == "auto"){
        @return "auto";
    }

    $dim: $dim * 1;
    @if(type-of($dim) == "string" and $dim == "auto"){
        @return $dim;
    }@else if(type-of($dim) != "number"){
        @warn $dim + " cannot be converted to px.";
        @return null;
    }@else if(unit($dim) == "rem"){
        //Convert rem to px
        @return sub-px(strip-unit($dim) * px($baseline));
    }@else if(unit($dim) == "em"){
        //Convert em to px
        @return sub-px(strip-unit($dim) * px($em-baseline));
    }@else if(unit($dim) == "pt"){
        //Convert pt to px
        @return sub-px(strip-unit($dim) / px($px-per-inch));
    }@else if(unit($dim) == "%"){
        //Retain percentages
        @return sub-px($dim);
    }@else{
        //Ensure px unit
        @return sub-px(strip-unit($dim)) + 0px;
    }
}


// Convert a number to an rem, or ensure an rem value.
// Percentages are retained. Use percent() to calculate static values.
// @function rem
// @param $dim {Number} An rem value.
@function rem($dim){
    $-is-list: type-of($dim) == "arglist" or type-of($dim) == "list";
    @if($-is-list and length($dim) > 1){
        $rems: ();
        @each $value in $dim {
            $rems: append($rems, rem($value), space);
        }
        @if(length($rems) == 1){
            @return nth($rems, 1);
        }@else{
            @return $rems;
        }
    }@else if($dim == "auto"){
        @return "auto";
    }@else if($-is-list){
        $dim: nth($dim, 1);
    }
    @if($dim == "auto"){
        @return "auto";
    }
    $dim: $dim * 1;
    @if(type-of($dim) != "number"){
        @warn $dim + " cannot be converted to rem.";
        @return null;
    }@else if(unit($dim) == "rem" or unitless($dim)){
        //Ensure rem unit
        @return strip-unit($dim) + 0rem;
    }@else if(unit($dim) == "%"){
        //Retain percentages
        @return $dim;
    }@else{
        //Convert to px, then to rem
        $dim: px($dim);
        @return strip-unit($dim) / strip-unit($baseline) + 0rem;
    }
}

// Sometimes em values are still viable, obviously, but you have to know the context for calculations. The baseline is stored, so each subsequent call will use the previous $baseline parameter, if none is passed.
// @function em
// @param $dim {Number}
// @param $baseline {Number} [global $em-baseline] However many px = 1em, or the relative em of the current context.
// @param $adjust {Boolean} [false] When true, adjusts the global $em-baseline to whatever the result is. this is useful if you want to set things font-size: em(12px)
@function em($dim, $baseline: $em-baseline, $adjust: false){
    $-is-list: type-of($dim) == "arglist" or type-of($dim) == "list";
    @if($-is-list and length($dim) > 1){
        $ems: ();
        @each $value in $dim {
            $ems: append($ems, em($value), space);
        }
        @if(length($ems) == 1){
            @return nth($ems, 1);
        }@else{
            @return $ems;
        }
    }@else if($-is-list){
        $dim: nth($dim, 1);
    }
    @if($dim == "auto"){
        @return "auto";
    }

    $dim: $dim * 1;
    @if(type-of($dim) != "number"){
        @warn $dim + " cannot be converted to em.";
        @return null;
    }@else if(unit($dim) == "em" or unitless($dim)){
        //Ensure em unit
        @return strip-unit($dim) + 0em;
    }@else{
        //Make sure $dim is a px, then convert
        $dim: px($dim);
        $-em: strip-unit($dim / px($baseline)) + 0em;
        @if($adjust){
            $em-baseline: $dim; //Update global $em-baseline
        }
        @return $-em;
    }
}





// Convert arbitrary units to or from percentages. This works a little differently than the other unit functions, because it does not retain units of its own type. In other words, a % value will be converted, rather than returned entact.
// @function percent
// @param $dim {Number} If a %
// @param $context {Number} The total width for the calculation of the percentages.
// @return {Number} If $dim is a % value, returns the percent calculation in the same unit as $context. If $dim is another unit, a % will be returned.
// =percent(24px, 240px) = 10%
// =percent(1.5rem, 240px) = 10%
// =percent(10%, 240px) = 24px
// =percent(10%, rem(240px)) = 1.5rem
@function percent($dim, $context){
    $-is-list: type-of($dim) == "arglist" or type-of($dim) == "list";
    @if($-is-list and length($dim) > 1){
        $percents: ();
        @each $value in $dim {
            $percents: append($percents, percent($value, $context), space);
        }
        @if(length($percents) == 1){
            @return nth($percents, 1);
        }@else{
            @return $percents;
        }

    }@else if($dim == "auto"){
        @return "auto";
    }

    $dim: $dim * 1;
    @if(type-of($dim) != "number"){
        @warn $dim + " cannot be converted to percent.";
        @return null;
    }@else if(unit($dim) == "%" or unitless($dim)){
        //Calculate percentage
        @return strip-unit($dim / 100) * $context;
    }@else {
        //Convert to px then percentage
        @return strip-unit(px($dim) / px($context)) * 100%;
    }
}

//Visually relative to the pixels per inch of a device, but provides a consistent mathmatical formula for converting units to pts for print.
//Totally untested with actual print at this point.
// @function pt
// @param $dim
// @param $px-per-inch Defaults to global $px-per-inch (96).
// @param $pt-per-inch Defaults to global $pt-per-inch (72).
// @return {Number} A pt value.
// =pt(16px) = 12pt
@function pt($dim, $px-per-inch: $px-per-inch, $pt-per-inch: $pt-per-inch){
    $-is-list: type-of($dim) == "arglist" or type-of($dim) == "list";
    @if($-is-list and length($dim) > 1){
        $pts: ();
        @each $value in $dim {
            $pts: append($pts, pts($value), space);
        }
        @if(length($pts) == 1){
            @return nth($pts, 1);
        }@else{
            @return $pts;
        }

    }@else if($dim == "auto"){
        @return "auto";
    }

    $dim: $dim * 1;
    @if(type-of($dim) != "number"){
        @warn $dim + " cannot be converted to px.";
        @return null;
    }@else if(unit($dim) == "pt" or unitless($dim)){
        @return strip-unit($dim) + 0pt;
    }@else{
        //Convert to px, then pt
        $dim: strip-unit(px($dim));
        @return $dim * strip-unit($pt-per-inch) / strip-unit($px-per-inch) + 0pt;
    }
}


// @function cast-unit
// @param $unit {String} [em,pt,px,rem]
// @param $dims
//= cast-unit(px, 3em, 4em, (5))
@function cast-unit($unit, $dims...){
    @if($unit == "em"){
        @return em(($dims));
    }@else if($unit == "rem"){
        @return rem(($dims));
    }@else if($unit == "pt"){
        @return pt(($dims));
    }@else if($unit == "px"){
        @return px(($dims));
    }@else{
        @warn "Cannot cast \"#{$unit}\" unit for "+ $dims;
    }
    @return null;
}


// Convert all numbers to the same unit type. Percentages are ignored. Convert them first with percent(), if necessary.
// @mixin unity
// @param $dims...
//= unity(12px, 1em) = #{unity(12px, 1em)}
//= unity(1em, 14px, 1.2rem, (16, 8%)) = 1em .25em 1.45em 16em 8%
@function unity($dims...){
    $unified:();
    $unit: first-unit($dims);
    @each $dim in $dims {
        @if(type-of($dim) != "list" and type-of($dim) != "arglist"){
            $dim: ($dim);
        }
        @each $val in $dim {
            $val: cast-unit($unit, $val);
            $unified: append($unified, $val);
        }
    }
    @return $unified;
}





// Add numbers, normalizing them first. Percentages are ignored. Convert them first with percent(), if necessary.
// @mixin plus
// @param $dims...
//= plus(1rem, 4px, 7em, 5)
@function plus($dims...){
    $dims: unity($dims);
    $total: 0;
    @each $dim in $dims {
        @if(unit($dim) != "%" and $dim != "auto"){
            $total: $total + $dim;
        }
    }
    @return $total;
}


// Subtract numbers, normalizing them first. Percentages are ignored. Convert them first with percent(), if necessary.
// @mixin minus
// @param $dims...
//= minus(20rem, 4px, 7em, 5)
@function minus($dims...){
    $dims: unity($dims);
    $total: 0;
    @each $dim in $dims {
        @if(unit($dim) != "%" and $dim != "auto"){
            $total: $total - $dim;
        }
    }
    @return $total;
}



// Use rem units with px fallback
// Specify a px, em, or rem value with each property. Unitless values will be considered an rem.
// @mixin rem
// @param $properties...
// =rem(font-size 12px, line-height 1.4em)
@mixin rem($properties...){
    @each $property in $properties {
        $prop-name: nth($property, 1);
        $pxs:();
        $rems:();
        @for $i from 2 through length($property) {
            $value: nth($property, $i);
            @if(unit($value) == "px"){
                $pxs: append($pxs, $value, space);
                $rems: append($rems, rem($value), space);
            }@else{
                $pxs: append($pxs, strip-unit($value) * $baseline, space);
                $rems: append($rems, rem($value), space);
            }
        }
        //Output
        #{$prop-name}: $pxs; /* px fallback for rem */
        #{$prop-name}: $rems;
    }
}

// rem() usage:

// .myselector {
//     line-height: rem(15px); //Pass a px value.
//     right: rem(1.5); //Pass a rem, em, or unitless value.
//     @include rem(font-size 12px, top 1.7);
//  }

// rem() output:

// .myselector {
//     line-height: 1.06667rem;
//     right: 10.66667rem;
//     font-size: 12px;
//     font-size: 1.33333rem;
//     top: 27.2px;
//     top: 9.41176rem;
// }

// // -------------------------------------------------------------------------------
// // mixin for element breakpoints by @micahgodbolt modified by @jpavon found here
// // https://gist.github.com/micahgodbolt/5851228
// // -------------------------------------------------------------------------------

@mixin respond-to($queries...) {
    $length: length($queries);
    @for $i from 1 through $length{
        @if $i % 2 == 1 {
            @media #{nth($queries, $i)} {
                #{nth($queries, $i+1)} {
                  @content;
                }
            }
        }
    }
}

// // ----------------------------------------------------
// // demo usage of respond-to for element queries
// // ----------------------------------------------------

// // first define custom breakpoints, the defaults are defined in _config.scss

// $p: 'only screen and (min-width : #{$portable})';
// $l: 'only screen and (min-width : #{$lap})';
// $d: 'only screen and (min-width : #{$desk})';


// // -----------------------------------------------------------------
// // Demo usage of respond -to
// // -----------------------------------------------------------------

// @include respond-to($s, '.content',
//                     $m, 'aside') {
//     .schedule-component {
//         float: left;
//         width: 100%;
//         position:relative;
//     }
//     .schedule-component ul,
//     .schedule-component li {
//         list-style: none;
//         position: absolute;
//         margin: 0;
//         padding: 0;
//     }
// }

// // css output of above example

// @media only screen and (min-width: 30em) {
//   .content .schedule-component {
//     float: left;
//     width: 100%;
//     position: relative;
//   }
//   .content .schedule-component ul,
//   .content .schedule-component li {
//     list-style: none;
//     position: absolute;
//     margin: 0;
//     padding: 0;
//   }
// }
// @media only screen and (min-width: 90em) {
//   aside .schedule-component {
//     float: left;
//     width: 100%;
//     position: relative;
//   }
//   aside .schedule-component ul,
//   aside .schedule-component li {
//     list-style: none;
//     position: absolute;
//     margin: 0;
//     padding: 0;
//   }
// }